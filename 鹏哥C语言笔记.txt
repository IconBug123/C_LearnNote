每日问题和扩展归总：
	1 动态和静态库
	2 回调函数     		√ 在鹏哥113
	3 数据库的使用		
	4 内存池

C语言的主要内容核心点
1 指针
2 结构体
3 动态内存开辟
以上内容是学习数据结构和C++的关键


要做的事情:
√写一个动态内存的笔记, 里面包含⑩⑤节内容

 ①
int main(){
  {
  	int a = 10;
	printf("%d\n", a);   //可以输出
  }
  printf("%d", a);	      //不可以输出，因为a定义的作用域是在上面的{}作用域里
}
在{}里的内容是代码块，只能在该{...}里面使用，在外面不能调用。


②
Note that字符串的末尾有\0才能结束
char arr[] = {'a', 'b', '\0'};  //此处要有\0
printf("%s", arr);

arr[] = {1, 2, 3};
strlen(arr)     //此处不是3, 因为strlen只有到/0才停止

  
③
转义字符
\字符   表示其他含义。如\n, \0 ......


④
static是内部链接
extern是外部链接，因此不能extern int a；然后用static int a = 10；定义
如果用static int a = 10；则该变量只能在该文件使用，因为链接改变了
extern 声明的变量在file1.c，可以在其他文件里file2.c里定义，可以在任意文件里使用，由于是
外部链接属性因此不需要头文件。函数也可以用extern。
static如同把函数或是变量私有化，仅仅是声明时所在的文件可以用

register int num = 3；建议把num放到寄存器里，但不一定。
 

⑤
int* p1, p2, p3;
此处p1是指针，p2和p3是int变量
int* p1, *p2, *p3;


⑥
从C99之后才可以for(int i = 0; i<10; i++)在for里面赋值int i
通常：
int i = 0；
for(i=100; i<200; i++)

也可以多个变量 for(x = 1, y =2; x<4||y<7; x++, y++)


⑦
随机种子的使用：一个随机种子对应一个随机数表，每次设定好随机数种子后就会从该表里第一个开始顺序拿取随机数，如果每次都设置随机数表则都会先拿取该表的第一个数。


⑧
C语言里的函数里形参是数组int arr[]与int* arr是一样的，都是一个int的指针。
但是在函数里无法求得数组arr的size (sizeof)因为在函数里只是一个数组的首元素地址

函数里的形参int arr[][3] 和 int (*arr)[][3]的区别：
	前者int arr[][3] 是 &arr[0] 或 arr
	后者int (*arr)[][3] 是 &arr


⑨ 静态库  鹏哥C的44集 (目前作为了解)
通过该静态库的头文件和该静态库 add.lib（此处add名字是随意起的）
在主函数main里#pragma comment(lib, "add.lib")

 
⑩
在C99之后的数组可以用变量指定其size
如: int n = 10;
     int arr[n] = {};


⑩①
数组 int arr[10] 的类型是 int [10]

数组名是一个不可修改的左值


⑩②
蛋哥C语言深度解剖

*****      内存里存储的是数据的补码
正整数的原码=反码=补码
负整数的原码   反码=原码的符号位不变, 其他位按位取反  补码=反码+1

左移右移操作符只能对于正负整数，不能对浮点数
因此对于负整数而言左右移动的是他的补码

左移操作符：
左边移位，右边补0

右移操作符：
算术移位：右边丢弃，左边补原符号
逻辑移位：右边移位，左边补0

VS编译器采用的是算术移

常用的异或操作符
0^a = a
a^a = 0
a^b = b^a
(a^b)^c = a^(b^c)

*********按位操作符只是针对整数**********


 ⑩③
"string_1" == "string_2"比较的是他们的地址
strcmp(string_1, string_2);

逗号表达式：exp1, exp2, exp3, ...expN
从左向右执行, 整个表达式的结果是最后一个表达式的结果
例如：
int a = 1; int b = 2;
int c = (a++, a+b); 结果为 c = 4

操作符有优先级，但是计算时候要注意唯一路径，否则结果会不一致。



⑩④
(1) 指针变量+-1是对应的他的数据类型的步长。
(2) 指针的类型决定了他的运算时的步长 和 内容的存储方式(解引用后访问的内存大小，如char* 访问1byte)

数字常量没有地址(直接嵌入的到程序里的)，宏定义没有地址，const变量有地址，字符串有地址
指针是变量的初始地址 (一般是低地址) 一个地址的存储空间是1byte
占有不同字节大小的数据它们的存储方式是字节按照大小端存储 (大小端只是存储数据的字节byte的顺序)。char类型没有大小端之分

注意：int* fun(){int x=10; return &x;}此处的返回值是一个野指针，由于x在函数结束后就销毁了
	  char* ptr = NULL; 说明指针ptr的地址是NULL没有地址

typedef 原有名字  newName;
typedef struct Name{....} newName;   
typedef char* String;	指针新名字String
typedef struct Node{int val; struct Node* next}Node, *NodePtr;     结构体指针  NodePtr   相当于struct Node*,  而 Node 相当于struct Node
typedef int(*FuncPtr)(int, char, ...);      该函数指针数据类型的新名字FunPtr



⑩⑤

assert断言的使用：
assert(判断情况); 如果为真则继续下面的代码，否则在此处报错
例如: char* str = "abc";
	assert(str != NULL);  //或assert(str);

***!!!!!***
字符串可以理解为const char* 虽然变量内容不能修改，但可以修改它的指向到另一个字符串的地址
char* str_1 = "abc";
char* str_2 = "123;
str_1 = str_2;   //不能*str_1 = *str_2;修改元素内容

因此strcpy函数里的参数是char arr[] = "abc"; 不是字符串(由于字符串是常量), 而此处arr[]是一个字符数组

字符串有两种表达：(1) 不可以修改内容 const char* str = "abc"; 
			       (2) 可以修改内容 char arr[] = "abc";


⑩⑥
数据的存储
数据在电脑里是以补码的形式存储，
char a = -1;
此处-1 = 1000 0000 0000 0000 0000 0000 0000 0001
该-1补码是: 1111 1111 1111 1111 1111 1111 (1111 1111)
转话为: char a是1个字节为低位的1111 1111并且是有符号的所以为：1111 1111→高位的1为符号
它对应int的补码：1111 1111 1111 1111 1111 1111 1111 1111 为-1
而char a它对应的unsigned int 此时就是1111 1111 1111 1111 1111 1111 1111 1111 就是原码 4294967295(此时高位的1不是符号)
但是unsigned char b = -1; 就是1111 1111
它对应int的补码：0000 0000 0000 0000 0000 0000 1111 1111 就是255
(1) 数据的正负类型对应的是字节前面补充的数字1或是0， 无符号类型补0，有符号类型补根据高位而定
(2) 数据的正负类型也说明它的补码的2进制的高位是否为符号还是非符号(原码=补码)

(原码的补码：正数原码=反码=补码；负数补码=原码的反码+1，补码的补码=原码)

数据都是二进制方式存储，但是为了方便阅读二进制的每4位都表示成一个16进制的数字，如1010 0110  表示为0XA6为一个字节(Note that 0X表示16进位)
8位(bit)是一个byte字节, char类型占用 1 byte
小端存储就是数据低字节存在低地址，反之大端存储就是数据低字节存在高地址
一个地址存储一个字节的内容 (空间大小) 所以char而言没有大小端因为就一个字节

int a = 0x12345678;（十进制 305419896）
如果是 小端（Little-Endian） 处理器：
地址  | 数据（二进制）  | 数据（十六进制）      
------|--------------|--------------
0x100 | 0111 1000    | 0x78
0x101 | 0101 0110    | 0x56
0x102 | 0011 0100    | 0x34
0x103 | 0001 0010    | 0x12
低地址 -> 78 56 34 12 <- 高地址

如果是 大端（Big-Endian） 处理器：
地址  | 数据（二进制）  | 数据（十六进制）
------|--------------|--------------
0x100 | 0001 0010    | 0x12
0x101 | 0011 0100    | 0x34
0x102 | 0101 0110    | 0x56
0x103 | 0111 1000    | 0x78



⑩⑦  
void* 没有具体类型的指针, 但可以接受任何类型的指针，但是不能解引用操作 (因为没有具体类型就无法知道解引用后访问的内存大小，也不能+-整数进行步长运算)，所以要在解引用前进行类型转换 (转换为某个具体类型)

例如：
int a = 10;
void* ap = &a;
*(int*) ap;   //将ap强制转换为 int* 指针在解引用
强制转化后的ap还是void*类型, 强制转换只是临时改变了ap的使用方法, 但实际的ap还是void*类型。

int b = 123;
void* bp = &b;
bp = (int*) bp + 1;  那么 bp 仍然是 void* 类型，只是在原有的地址上往后移动了4个字节

回调函数 (第113在sqort函数里讲的)：当函数A通过它的函数指针Ap被另一个地方(可以是另一个函数通过函数指针参数)在某个情况调用时，则称函数A是回调函数，被另一个地方回调的函数



⑩⑧
strerror函数可以打印处错误信息, 错误信息保存在errno (int) 里面 #include <string.h>
char* strerror(errno);



⑩⑨
结构体：
struct Name{
	int a; 
	char b;
	float c;
} s1, s2 = {12, 'a', 0.3};
此处如果结构体定义在main函数外部, 则为s1和s2为全局变量, 如果没有Name则是匿名结构体, 此时只能用s1, s2不能在创建其他的对象
也可以: struct Name s1;  也可以初始化

结构体的数据存储方式：
(1) 第一个变量存储在偏移量为0的起始地址处
(2) 其他变量存在  最小整数倍 of min(编译器默认对齐数与该变量字节大小的) 作为偏移量的地址处 (中间的字节空间都是空的)
(3) 结构体的占用的总空间是  整数倍 of max(所有变量对齐数)     各变量的对齐数是: min(编译器默认对齐数与该变量字节大小的)
(4) 结构体里嵌套了其他结构体，则该嵌套的结构体的所占总空间为自身大小，对齐到偏移量为自身里最大对齐数的整数倍，该空间总大小为 整数倍 of max(所有对齐数包括嵌套的结构体) 
(结构体自身的对齐数是自己内部的 max(内部变量的对齐数)) 

#pragm pack(4)  修改默认偏移数为4
#pragm pack()    修改回默认值


②⑩ （了解此处内容）
位段的成员必须是int, unsigned int  或 signed int，char 
struct A{
   int a : 2;
   int b : 3; 
};
说明a占用2个bit 从而可以分配空间大小
位段时int按照4byte，char按照1byte开辟空间 
位段不具有跨平台
位段的大小不能超过该类型的字节大小
      ☆☆☆ 位段最好不要使用，由于不同的系统分配空间情况不一样。所以不能跨平台。。。。除非写出不同平台的代码适应这些平台



②⑩①
枚举：数据可以一一列举
enum Day{
	//枚举常量  Mon = 1是初始值
	Mon = 1,
	Tues,
	Wed,
	Thur,
	Fri,
	Sat,
	Sun
};
Note that: 每个枚举的内容后面都是 , 逗号

enum d = Fri;  //定义一个枚举变量，此时才占用空间
也可直接用枚举里定义的类型

枚举量是有int值的 默认从0→...., 也可以自己修改例如：Mon = 1;
枚举只有在定义变量时才占用空间，而声明的只是个模版(图纸)

为什么要用枚举：
	（1）增加代码的可读性
	（2）和#define定义的相比较enum有类型检查，更加严谨
	（3）防止命名污染 (封装)
	（4）便于调试
	（5）使用方便，一个可以定义多个变量
	 


②⑩②
联合体
union Un{
	int a;
	char b;
};
union Un u = {1, 'a'};
u, u.a u.c的地址都是一样的，所占的空间是最大对齐数 of 数据类型的整数倍，共享一个空间
联合体里的数据类型不同时用，每次只使用里面的一个数据类型
int check_sys(){
	union Un{
		char c;
		int a;
	} u;
	u.a = 1;
	return u.c
}
判断大小端存储



②⑩③
动态内存管理
1 为什么要用动态内存分配
	传统的方式空间开辟大小是固定的，所以要动态改变
	
地址高
	栈区：局部变量，形式参数 (这些临时变量用完后自动回收空间)
	堆区：malloc realloc calloc free 当程序退出时系统会自动回收。
	静态区：主要存放程序运行期间一直存在的变量（全局变量，静态变量）
	常量区：字符串字面量, const修饰的常量	
	代码区： 编译后生成的程序指令
低地址


2 常见函数#include<stdlib.h>
（1）malloc
	void* malloc(size_t size)  开辟大小为size byte的连续内存，return该空间地址的起始位置
	有可能申请失败，则return会是空指针
	
	例如：	
		int* p = (int*)malloc(40);
		if(p == NULL){
			printf("%s\n", strerror(errno));
			return 1; （人为规定1为失败，也可以去其他值）
		} 
		return 0;
	
（2）calloc
	void* calloc(size_t num, size_t size)
	开辟num个，每个空间大小为size的，而且初始化里面的数据

（3）realloc
	void* realloc(void* ptr, size_t size)
	ptr是要修改的空间的地址(起始位置), size是要将该空间调整为新的大小
	realloc可以调节空间大小 (其实是新开辟了一个新的空间，将之前的数据拷贝过来了，
	有可能在原空间上开辟，也可能在新地址上开辟)
	当给realloc一个空指针的话功能和malloc一样
	*** realloc会自动把之前的空间释放, 若果realloc开辟失败则原来的空间不会被释放

（4）free
	释放申请的动态空间 (堆空间)，对于int* a =&b; 这些不能用，由于是栈空间 
	free释放的堆空间要注意：指针是该空间的起始位置
	free不能对同一个堆空间多次释放，除非是该指针 = NULL, 因为free(NULL)等于什么都没做
	free顺序是按照开辟的逆序


3 常见的动态内存错误
（1）一定要检查创建的空间后指针是否为空 if(ptr == NULL )
（2）当内存 free(p) 后，要  p = NULL;
（3）注意动态空间(堆空间上的)使用后要释放

char* get_m(char* ptr_1) {
	return ptr_1 = (char*)malloc(100);
}
char* ptr_1 = NULL;
ptr_1 = get_m(ptr_1);

void get_mm(char** ptr_1) {
	*ptr_1 = (char*)malloc(100);
}
char* ptr_1 = NULL;
get_m(ptr_1);

//void get_mm(char* ptr_1) {
//	ptr_1 = (char*)malloc(100);
//}就不能给外部的char* ptr_1申请空间



4 柔性数组
	1 结构体里最后一个成员可以允许是一个未知大小的数组 (前面必须有其他成员)，称为柔性数组成员

	struct S{
		int i;
		int a[]; 或int a[0]; 
	};
	
	2 sizeof(柔性数组的结构体) 数组不在计算内存范围内 sizeof(struct S) = 4 只有 int 的内存
	3 创建变量时不能 struct S s而是：struct S* ptr = (struct S*)malloc(sizeof(struct S)+40) 给柔性数组开辟 40 bytes

	柔性是指: 当开辟后的数组可以在通过realloc去改变数组的大小 struct S* ptr_new = (struct S*)realloc(ptr, sizeof(struct S)+80);

 	也可以
	struct S{
		int i;
		int* arr; 
	};
	struct S* ptrs = (struct S*)malloc(sizeof(struct S));   目的是放到堆区(与柔性数组一致)
	ptrs->arr = (int*)malloc(40);
	int* arr_2 = (int*)realloc(prts->arr, 80);  
	但是这个方法要两次malloc，不推荐




②⑩④
文件处理
每个被使用的文件都是在内存里有个文件信息区(是一个结构体 FILE) 因此这个文件的地址就是FILE* 
FILE* fp 这个指针对应的就是该地址的文件的存储空间 

文件信息区的地址(确定内存空间)的函数 FILE* fopen(const char* filename, const char* mode) 函数   char* filename（不是本地路径的需要绝对路径\\第一个\是转义符）
	
	FILE* fp = fopen(.....);  这个地址是为了确定这个文件信息区的储存器的空间范围，从而可以通过读写函数对其内部内容操作
	fclose(fp); （fp=NULL;）

读写过程：有对应的函数如：int fputc(int character, FILE* fp);   int character 是把字符强转为ASIIC码值
					     int fputs(const char *str, FILE *stream);

介绍内容：sprintf 把结构化数据转化成字符串char arr[10];
		 sscanf 把字符串char arr[10]里的数据转换为格式化数据 




②⑩⑤
main.c → 编译过程（预处理，编译，汇编）→ 链接过程
		
预处理过程：头文件包含，define定义被替换并删除define，注释没有了，......文本操作
编译过程：把预处理后的文件编译成汇编语言
汇编过程：把汇编代码转换为2进制代码 每个原文件都有符号表

链接过程：合并段表，符号表的合并和重定位  (符号表的目的是可以跨文件链接)

1. 宏（）
#define name( parament-list ) stuff
此处parameter-list是一个有逗号隔开的符号表，他们可能出现在stuff，不是一个整体
parameter-list的左括号要与name紧密相连
如：#define SQUARE(X) X*X  
	会替换SQUARE(5)  5*5  此处X如果是5+1，则5+1*5+1
       #define SQUARE(X)  ((X)+(X))     外侧括号目的是: 10*((3)+(3))
        字符串里的不会替换

offsetof 计算结构体内数据的偏移量   #define OFFSETOF(type, m_name)  (size_t)&(((type*)0)->m_name)

2#和##
#是把内容转化为字符串 
#define PRINT(N) printf("The value is "#N" is %d\n", N)
由于#N被替换为"N" 此时printf("The value is ""N"" is %d\n", N)
printf("Hello ""World") 等价与printf("Hello World");

##把它两边的符号合成一个符号
 #define CAT(Class, Num) Class##Num
 int Class106 = 100;
 printf("%d\n", CAT(Class, 106));  如同printf("%d\n", Class106);

小型的计算可以用宏，但是宏不能调试，数据与类型无关，不够严谨 


3#undef
解除这个M的宏定义 #undef M


4 宏判断

指令	常用场景
#ifdef		判断某个宏是否已定义
#ifndef		判断某个宏是否没有被定义
#define		定义宏（通常配合条件编译使用）
#undef		取消定义某个宏
#if			更复杂的条件判断（可以加表达式）
#else		否则的情况
#elif	else if，	多个条件判断时使用
#endif		结束条件编译区块

